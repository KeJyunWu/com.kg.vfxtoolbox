// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Transform
#pragma kernel TransferData_RT
#pragma kernel TransferData_Buffer

struct SamplePoint
{
    uint4 indices;
    float4 weights;
};

uint SampleCount;
StructuredBuffer<SamplePoint> SamplePoints;
StructuredBuffer<float3> PositionBuffer1;
StructuredBuffer<float3> PositionBuffer2;
StructuredBuffer<float3> NormalBuffer;
StructuredBuffer<float2> UVBuffer;

RWStructuredBuffer<float3> PositionSampledBuffer;
RWStructuredBuffer<float3> NormalSampledBuffer;
RWStructuredBuffer<float2> UVSampledBuffer;
RWStructuredBuffer<float3> VelocityBuffer;

RWTexture2D<float4> PositionMap;
RWTexture2D<float4> VelocityMap;
RWTexture2D<float4> NormalMap;
RWTexture2D<float4> UVMap;

RWStructuredBuffer<float3> PositionTransformBuffer;
RWStructuredBuffer<float3> NormalTransformBuffer;

int m_offset;
int m_count;
float4x4 m_objectToWorldMatrix;
float4x4 m_worldToObjectMatrix;

float3 m_positionOffset;
float3 m_positionScale;
float3 m_positionFlip;

int m_matrixType;

float3 SampleBuffer3D(StructuredBuffer<float3> buffer, SamplePoint sp)
{
    return buffer[sp.indices.x] * sp.weights.x + 
           buffer[sp.indices.y] * sp.weights.y + 
           buffer[sp.indices.z] * sp.weights.z;
}

float2 SampleBuffer2D(StructuredBuffer<float2> buffer, SamplePoint sp)
{
    return buffer[sp.indices.x] * sp.weights.x +
        buffer[sp.indices.y] * sp.weights.y +
        buffer[sp.indices.z] * sp.weights.z;
}

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

 //public enum MatrixType
 //{
 //    Target,
 //    Self,
 //    None
 //}

[numthreads(8,1,1)]
void Transform (uint id : SV_DispatchThreadID)
{
   if(id<m_count)
   {
        int _index = id+m_offset;
        float3 _p = PositionTransformBuffer[_index];
        float3 _n = NormalTransformBuffer[_index];

        _p *= m_positionFlip;
        _p *= m_positionScale;
        if (m_matrixType != 2)
        {
            _p = mul(m_objectToWorldMatrix, float4(_p, 1)).xyz;
            _n = mul(m_objectToWorldMatrix, float4(_n, 0)).xyz;
        }
        _p += m_positionOffset;

        PositionTransformBuffer[_index] = _p;
        NormalTransformBuffer[_index] = _n;
   }
}

[numthreads(8, 8, 1)]
void TransferData_RT(uint2 id : SV_DispatchThreadID)
{
    uint si = Hash(id.x + id.y * 65536) % SampleCount;
    SamplePoint _sp = SamplePoints[si];

    float3 _p1 = SampleBuffer3D(PositionBuffer1, _sp);
    float3 _p2 = SampleBuffer3D(PositionBuffer2, _sp);
    float3 _n1 = normalize(SampleBuffer3D(NormalBuffer, _sp));
    float2 _uv1 = SampleBuffer2D(UVBuffer, _sp);
    float3 _v = _p1 - _p2;

   PositionMap[id] = float4(_p1, 1);
   NormalMap[id] = float4(_n1, 0);
   VelocityMap[id] = float4(_v, 0);
   UVMap[id] = float4(_uv1, 0, 0);
}

[numthreads(8, 1, 1)]
void TransferData_Buffer(uint id : SV_DispatchThreadID)
{
    SamplePoint _sp = SamplePoints[id];

    float3 _p1 = SampleBuffer3D(PositionBuffer1, _sp);
    float3 _p2 = SampleBuffer3D(PositionBuffer2, _sp);
    float3 _n1 = normalize(SampleBuffer3D(NormalBuffer, _sp));
    float2 _uv1 = SampleBuffer2D(UVBuffer, _sp);
    float3 _v = _p1 - _p2;

   PositionSampledBuffer[id] = _p1;
   NormalSampledBuffer[id] = _n1;
   UVSampledBuffer[id] = _uv1;
   VelocityBuffer[id]  = _v;
}